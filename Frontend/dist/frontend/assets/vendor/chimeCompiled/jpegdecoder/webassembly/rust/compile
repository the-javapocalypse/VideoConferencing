#!/usr/bin/env ruby
require 'base64'

def verbose command
  puts "--> #{command}"
  system(command) || fail("Failed: #{command}")
end

Dir.chdir(File.expand_path(File.dirname(__FILE__)))
verbose('rm -rf build')
verbose('mkdir -p build')
verbose('rustfmt src/lib.rs')
verbose('wasm-pack build --target no-modules')
input = 'example-template.html'
output = "#{File.basename(input).gsub('-template', '')}"
raw_wasm = File.open('pkg/wasm_jpeg_decoder_bg.wasm', 'rb') { |f| f.read }
encoded_wasm = Base64.encode64(raw_wasm).gsub("\n", '')
encoded_wasm_hex = raw_wasm.unpack('H*')[0]
bootstrap_data = <<-EOF
<script id="wasm-loader">
var jpegDecoderWasmBinary = '#{encoded_wasm}';
#{File.read('pkg/wasm_jpeg_decoder.js')}
EOF
template = File.read(input)
expanded = template.gsub('<script id="wasm-loader">', bootstrap_data)
File.write(output, expanded)
puts "Compiled: #{output}"

jpeg_decoder_module = <<~EOF
// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import Logger from '../../logger/Logger';

export default class JPEGDecoderModule {
  constructor(private logger: Logger) {
    logger.debug(() => {
      return `
The JPEGDecoder WebAssembly module uses this software:
jpeg-decoder by Ulf Nilsson, Copyright (c) 2016 The jpeg-decoder Developers, MIT License
https://github.com/kaksmet/jpeg-decoder
`.trim();
    });
  }

  module(): Uint8Array {
    const binaryHexString =
      '#{encoded_wasm_hex}';

    return new Uint8Array(binaryHexString.match(/../g).map(hexDigits => parseInt(hexDigits, 16)));
  }

  async init(): Promise<void> {
    const imports = {
      wbg: {
        // eslint-disable-next-line @typescript-eslint/camelcase
        __wbindgen_throw: (ptr: number, len: number): void => {
          const message = new TextDecoder('utf-8').decode(
            new Uint8Array(this.wasm().memory.buffer).subarray(ptr, ptr + len)
          );
          this.logger.error(message);
          throw new Error(message);
        },
      },
    };
    // @ts-ignore
    const result = await WebAssembly.instantiate(this.module(), imports);
    this.wasmInternal = result.instance.exports;
    this.wasmInternal.__wbindgen_start();
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  wasm(): any {
    return this.wasmInternal;
  }

  free(): void {
    this.wasmInternal = null;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private wasmInternal: any;
}
EOF
jpeg_decoder_module_file = '../JPEGDecoderModule.ts'
File.write(jpeg_decoder_module_file, jpeg_decoder_module)
puts "Compiled: #{jpeg_decoder_module_file}"
