import { HttpBackend, HttpClient } from '@angular/common/http';
import { Renderer2, RendererFactory2 } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { CachedIconDefinition, IconDefinition, ThemeType, TwoToneColorPalette, TwoToneColorPaletteSetter } from '../types';
import * as ɵngcc0 from '@angular/core';
export declare class IconService {
    protected _rendererFactory: RendererFactory2;
    protected _handler: HttpBackend;
    protected _document: any;
    protected sanitizer: DomSanitizer;
    defaultTheme: ThemeType;
    twoToneColor: TwoToneColorPaletteSetter;
    protected _renderer: Renderer2;
    protected _http: HttpClient;
    /**
     * All icon definitions would be registered here.
     */
    protected readonly _svgDefinitions: Map<string, IconDefinition>;
    /**
     * Cache all rendered icons. Icons are identified by name, theme,
     * and for twotone icons, primary color and secondary color.
     */
    protected readonly _svgRenderedDefinitions: Map<string, CachedIconDefinition>;
    protected _inProgressFetches: Map<string, Observable<IconDefinition | null>>;
    /**
     * Url prefix for fetching inline SVG by dynamic importing.
     */
    protected _assetsUrlRoot: string;
    protected _twoToneColorPalette: TwoToneColorPalette;
    /** A flag indicates whether jsonp loading is enabled. */
    private _enableJsonpLoading;
    private readonly _jsonpIconLoad$;
    constructor(_rendererFactory: RendererFactory2, _handler: HttpBackend, _document: any, sanitizer: DomSanitizer);
    /**
     * Call this method to switch to jsonp like loading.
     */
    useJsonpLoading(): void;
    /**
     * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
     * @param prefix
     */
    changeAssetsSource(prefix: string): void;
    /**
     * Add icons provided by ant design.
     * @param icons
     */
    addIcon(...icons: IconDefinition[]): void;
    /**
     * Register an icon. Namespace is required.
     * @param type
     * @param literal
     */
    addIconLiteral(type: string, literal: string): void;
    /**
     * Remove all cache.
     */
    clear(): void;
    /**
     * Get a rendered `SVGElement`.
     * @param icon
     * @param twoToneColor
     */
    getRenderedContent(icon: IconDefinition | string, twoToneColor?: string): Observable<SVGElement>;
    getCachedIcons(): Map<string, IconDefinition>;
    /**
     * Get raw svg and assemble a `IconDefinition` object.
     * @param type
     */
    protected _loadIconDynamically(type: string): Observable<IconDefinition | null>;
    protected _loadIconDynamicallyWithJsonp(icon: IconDefinition, url: string): Observable<IconDefinition>;
    /**
     * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
     * @param icon
     * @param twoToneColor
     */
    protected _loadSVGFromCacheOrCreateNew(icon: IconDefinition, twoToneColor?: string): SVGElement;
    protected _createSVGElementFromString(str: string): SVGElement;
    protected _setSVGAttribute(svg: SVGElement): SVGElement;
    protected _colorizeSVGIcon(svg: SVGElement, twotone: boolean, pri: string, sec: string): SVGElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IconService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImljb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBCYWNrZW5kLCBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENhY2hlZEljb25EZWZpbml0aW9uLCBJY29uRGVmaW5pdGlvbiwgVGhlbWVUeXBlLCBUd29Ub25lQ29sb3JQYWxldHRlLCBUd29Ub25lQ29sb3JQYWxldHRlU2V0dGVyIH0gZnJvbSAnLi4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWNvblNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBfcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyO1xuICAgIHByb3RlY3RlZCBfaGFuZGxlcjogSHR0cEJhY2tlbmQ7XG4gICAgcHJvdGVjdGVkIF9kb2N1bWVudDogYW55O1xuICAgIHByb3RlY3RlZCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcjtcbiAgICBkZWZhdWx0VGhlbWU6IFRoZW1lVHlwZTtcbiAgICB0d29Ub25lQ29sb3I6IFR3b1RvbmVDb2xvclBhbGV0dGVTZXR0ZXI7XG4gICAgcHJvdGVjdGVkIF9yZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBfaHR0cDogSHR0cENsaWVudDtcbiAgICAvKipcbiAgICAgKiBBbGwgaWNvbiBkZWZpbml0aW9ucyB3b3VsZCBiZSByZWdpc3RlcmVkIGhlcmUuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9zdmdEZWZpbml0aW9uczogTWFwPHN0cmluZywgSWNvbkRlZmluaXRpb24+O1xuICAgIC8qKlxuICAgICAqIENhY2hlIGFsbCByZW5kZXJlZCBpY29ucy4gSWNvbnMgYXJlIGlkZW50aWZpZWQgYnkgbmFtZSwgdGhlbWUsXG4gICAgICogYW5kIGZvciB0d290b25lIGljb25zLCBwcmltYXJ5IGNvbG9yIGFuZCBzZWNvbmRhcnkgY29sb3IuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9zdmdSZW5kZXJlZERlZmluaXRpb25zOiBNYXA8c3RyaW5nLCBDYWNoZWRJY29uRGVmaW5pdGlvbj47XG4gICAgcHJvdGVjdGVkIF9pblByb2dyZXNzRmV0Y2hlczogTWFwPHN0cmluZywgT2JzZXJ2YWJsZTxJY29uRGVmaW5pdGlvbiB8IG51bGw+PjtcbiAgICAvKipcbiAgICAgKiBVcmwgcHJlZml4IGZvciBmZXRjaGluZyBpbmxpbmUgU1ZHIGJ5IGR5bmFtaWMgaW1wb3J0aW5nLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBfYXNzZXRzVXJsUm9vdDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBfdHdvVG9uZUNvbG9yUGFsZXR0ZTogVHdvVG9uZUNvbG9yUGFsZXR0ZTtcbiAgICAvKiogQSBmbGFnIGluZGljYXRlcyB3aGV0aGVyIGpzb25wIGxvYWRpbmcgaXMgZW5hYmxlZC4gKi9cbiAgICBwcml2YXRlIF9lbmFibGVKc29ucExvYWRpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfanNvbnBJY29uTG9hZCQ7XG4gICAgY29uc3RydWN0b3IoX3JlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MiwgX2hhbmRsZXI6IEh0dHBCYWNrZW5kLCBfZG9jdW1lbnQ6IGFueSwgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpO1xuICAgIC8qKlxuICAgICAqIENhbGwgdGhpcyBtZXRob2QgdG8gc3dpdGNoIHRvIGpzb25wIGxpa2UgbG9hZGluZy5cbiAgICAgKi9cbiAgICB1c2VKc29ucExvYWRpbmcoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHByZWZpeCBvZiB0aGUgaW5saW5lIHN2ZyByZXNvdXJjZXMsIHNvIHRoZXkgY291bGQgYmUgZGVwbG95ZWQgZWxzZXdoZXJlLCBsaWtlIENETi5cbiAgICAgKiBAcGFyYW0gcHJlZml4XG4gICAgICovXG4gICAgY2hhbmdlQXNzZXRzU291cmNlKHByZWZpeDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZGQgaWNvbnMgcHJvdmlkZWQgYnkgYW50IGRlc2lnbi5cbiAgICAgKiBAcGFyYW0gaWNvbnNcbiAgICAgKi9cbiAgICBhZGRJY29uKC4uLmljb25zOiBJY29uRGVmaW5pdGlvbltdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhbiBpY29uLiBOYW1lc3BhY2UgaXMgcmVxdWlyZWQuXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKiBAcGFyYW0gbGl0ZXJhbFxuICAgICAqL1xuICAgIGFkZEljb25MaXRlcmFsKHR5cGU6IHN0cmluZywgbGl0ZXJhbDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGNhY2hlLlxuICAgICAqL1xuICAgIGNsZWFyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2V0IGEgcmVuZGVyZWQgYFNWR0VsZW1lbnRgLlxuICAgICAqIEBwYXJhbSBpY29uXG4gICAgICogQHBhcmFtIHR3b1RvbmVDb2xvclxuICAgICAqL1xuICAgIGdldFJlbmRlcmVkQ29udGVudChpY29uOiBJY29uRGVmaW5pdGlvbiB8IHN0cmluZywgdHdvVG9uZUNvbG9yPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxTVkdFbGVtZW50PjtcbiAgICBnZXRDYWNoZWRJY29ucygpOiBNYXA8c3RyaW5nLCBJY29uRGVmaW5pdGlvbj47XG4gICAgLyoqXG4gICAgICogR2V0IHJhdyBzdmcgYW5kIGFzc2VtYmxlIGEgYEljb25EZWZpbml0aW9uYCBvYmplY3QuXG4gICAgICogQHBhcmFtIHR5cGVcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2xvYWRJY29uRHluYW1pY2FsbHkodHlwZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxJY29uRGVmaW5pdGlvbiB8IG51bGw+O1xuICAgIHByb3RlY3RlZCBfbG9hZEljb25EeW5hbWljYWxseVdpdGhKc29ucChpY29uOiBJY29uRGVmaW5pdGlvbiwgdXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEljb25EZWZpbml0aW9uPjtcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBuZXcgYFNWR0VsZW1lbnRgIGZvciBhIGdpdmVuIGBJY29uRGVmaW5pdGlvbmAsIG9yIG1ha2UgYSBjb3B5IGZyb20gY2FjaGUuXG4gICAgICogQHBhcmFtIGljb25cbiAgICAgKiBAcGFyYW0gdHdvVG9uZUNvbG9yXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9sb2FkU1ZHRnJvbUNhY2hlT3JDcmVhdGVOZXcoaWNvbjogSWNvbkRlZmluaXRpb24sIHR3b1RvbmVDb2xvcj86IHN0cmluZyk6IFNWR0VsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIF9jcmVhdGVTVkdFbGVtZW50RnJvbVN0cmluZyhzdHI6IHN0cmluZyk6IFNWR0VsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIF9zZXRTVkdBdHRyaWJ1dGUoc3ZnOiBTVkdFbGVtZW50KTogU1ZHRWxlbWVudDtcbiAgICBwcm90ZWN0ZWQgX2NvbG9yaXplU1ZHSWNvbihzdmc6IFNWR0VsZW1lbnQsIHR3b3RvbmU6IGJvb2xlYW4sIHByaTogc3RyaW5nLCBzZWM6IHN0cmluZyk6IFNWR0VsZW1lbnQ7XG59XG4iXX0=