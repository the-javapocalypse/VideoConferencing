/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { NzUpdateHostClassService } from 'ng-zorro-antd/core';
import { TransferItem } from './interface';
import * as ɵngcc0 from '@angular/core';
export declare class NzTransferListComponent implements OnChanges, OnInit {
    private el;
    private updateHostClassService;
    private cdr;
    direction: string;
    titleText: string;
    showSelectAll: boolean;
    dataSource: TransferItem[];
    itemUnit: string;
    itemsUnit: string;
    filter: string;
    disabled: boolean;
    showSearch: boolean;
    searchPlaceholder: string;
    notFoundContent: string;
    filterOption: (inputValue: string, item: TransferItem) => boolean;
    renderList: TemplateRef<void>;
    render: TemplateRef<void>;
    footer: TemplateRef<void>;
    readonly handleSelectAll: EventEmitter<boolean>;
    readonly handleSelect: EventEmitter<TransferItem>;
    readonly filterChange: EventEmitter<{
        direction: string;
        value: string;
    }>;
    prefixCls: string;
    setClassMap(): void;
    stat: {
        checkAll: boolean;
        checkHalf: boolean;
        checkCount: number;
        shownCount: number;
    };
    onItemSelect: (item: TransferItem) => void;
    onItemSelectAll: (status: boolean) => void;
    private updateCheckStatus;
    handleFilter(value: string): void;
    handleClear(): void;
    private matchFilter;
    constructor(el: ElementRef, updateHostClassService: NzUpdateHostClassService, cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    markForCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTransferListComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTransferListComponent, "nz-transfer-list", ["nzTransferList"], {
    "direction": "direction";
    "titleText": "titleText";
    "showSelectAll": "showSelectAll";
    "dataSource": "dataSource";
    "itemUnit": "itemUnit";
    "itemsUnit": "itemsUnit";
    "filter": "filter";
    "disabled": "disabled";
    "showSearch": "showSearch";
    "searchPlaceholder": "searchPlaceholder";
    "notFoundContent": "notFoundContent";
    "filterOption": "filterOption";
    "renderList": "renderList";
    "render": "render";
    "footer": "footer";
}, {
    "handleSelectAll": "handleSelectAll";
    "handleSelect": "handleSelect";
    "filterChange": "filterChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJhbnNmZXItbGlzdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibnotdHJhbnNmZXItbGlzdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFVQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmltcG9ydCB7IFRyYW5zZmVySXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VHJhbnNmZXJMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSB1cGRhdGVIb3N0Q2xhc3NTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIHRpdGxlVGV4dDogc3RyaW5nO1xuICAgIHNob3dTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgZGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW107XG4gICAgaXRlbVVuaXQ6IHN0cmluZztcbiAgICBpdGVtc1VuaXQ6IHN0cmluZztcbiAgICBmaWx0ZXI6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzaG93U2VhcmNoOiBib29sZWFuO1xuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbm90Rm91bmRDb250ZW50OiBzdHJpbmc7XG4gICAgZmlsdGVyT3B0aW9uOiAoaW5wdXRWYWx1ZTogc3RyaW5nLCBpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IGJvb2xlYW47XG4gICAgcmVuZGVyTGlzdDogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgcmVuZGVyOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBmb290ZXI6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIHJlYWRvbmx5IGhhbmRsZVNlbGVjdEFsbDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHJlYWRvbmx5IGhhbmRsZVNlbGVjdDogRXZlbnRFbWl0dGVyPFRyYW5zZmVySXRlbT47XG4gICAgcmVhZG9ubHkgZmlsdGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9PjtcbiAgICBwcmVmaXhDbHM6IHN0cmluZztcbiAgICBzZXRDbGFzc01hcCgpOiB2b2lkO1xuICAgIHN0YXQ6IHtcbiAgICAgICAgY2hlY2tBbGw6IGJvb2xlYW47XG4gICAgICAgIGNoZWNrSGFsZjogYm9vbGVhbjtcbiAgICAgICAgY2hlY2tDb3VudDogbnVtYmVyO1xuICAgICAgICBzaG93bkNvdW50OiBudW1iZXI7XG4gICAgfTtcbiAgICBvbkl0ZW1TZWxlY3Q6IChpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHZvaWQ7XG4gICAgb25JdGVtU2VsZWN0QWxsOiAoc3RhdHVzOiBib29sZWFuKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlQ2hlY2tTdGF0dXM7XG4gICAgaGFuZGxlRmlsdGVyKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGhhbmRsZUNsZWFyKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBtYXRjaEZpbHRlcjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgdXBkYXRlSG9zdENsYXNzU2VydmljZTogTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG1hcmtGb3JDaGVjaygpOiB2b2lkO1xufVxuIl19