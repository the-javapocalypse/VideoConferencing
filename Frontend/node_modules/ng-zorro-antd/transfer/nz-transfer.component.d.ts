/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NzUpdateHostClassService } from 'ng-zorro-antd/core';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { TransferCanMove, TransferChange, TransferDirection, TransferItem, TransferSearchChange, TransferSelectChange } from './interface';
import * as ɵngcc0 from '@angular/core';
export declare class NzTransferComponent implements OnInit, OnChanges, OnDestroy {
    private cdr;
    private i18n;
    private nzUpdateHostClassService;
    private elementRef;
    private unsubscribe$;
    private lists;
    locale: any;
    leftFilter: string;
    rightFilter: string;
    nzDisabled: boolean;
    nzDataSource: TransferItem[];
    nzTitles: string[];
    nzOperations: string[];
    nzListStyle: object;
    nzShowSelectAll: boolean;
    nzItemUnit: string;
    nzItemsUnit: string;
    nzCanMove: (arg: TransferCanMove) => Observable<TransferItem[]>;
    nzRenderList: Array<TemplateRef<void> | null>;
    nzRender: TemplateRef<void>;
    nzFooter: TemplateRef<void>;
    nzShowSearch: boolean;
    nzFilterOption: (inputValue: string, item: TransferItem) => boolean;
    nzSearchPlaceholder: string;
    nzNotFoundContent: string;
    readonly nzChange: EventEmitter<TransferChange>;
    readonly nzSearchChange: EventEmitter<TransferSearchChange>;
    readonly nzSelectChange: EventEmitter<TransferSelectChange>;
    leftDataSource: TransferItem[];
    rightDataSource: TransferItem[];
    private splitDataSource;
    private getCheckedData;
    handleLeftSelectAll: (checked: boolean) => void;
    handleRightSelectAll: (checked: boolean) => void;
    handleLeftSelect: (item: TransferItem) => void;
    handleRightSelect: (item: TransferItem) => void;
    handleSelect(direction: TransferDirection, checked: boolean, item?: TransferItem): void;
    handleFilterChange(ret: {
        direction: TransferDirection;
        value: string;
    }): void;
    leftActive: boolean;
    rightActive: boolean;
    private updateOperationStatus;
    moveToLeft: () => void;
    moveToRight: () => void;
    moveTo(direction: TransferDirection): void;
    private truthMoveTo;
    constructor(cdr: ChangeDetectorRef, i18n: NzI18nService, nzUpdateHostClassService: NzUpdateHostClassService, elementRef: ElementRef, renderer: Renderer2);
    private setClassMap;
    private markForCheckAllList;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTransferComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTransferComponent, "nz-transfer", ["nzTransfer"], {
    "nzDisabled": "nzDisabled";
    "nzDataSource": "nzDataSource";
    "nzTitles": "nzTitles";
    "nzOperations": "nzOperations";
    "nzShowSelectAll": "nzShowSelectAll";
    "nzCanMove": "nzCanMove";
    "nzRenderList": "nzRenderList";
    "nzShowSearch": "nzShowSearch";
    "nzListStyle": "nzListStyle";
    "nzItemUnit": "nzItemUnit";
    "nzItemsUnit": "nzItemsUnit";
    "nzRender": "nzRender";
    "nzFooter": "nzFooter";
    "nzFilterOption": "nzFilterOption";
    "nzSearchPlaceholder": "nzSearchPlaceholder";
    "nzNotFoundContent": "nzNotFoundContent";
}, {
    "nzChange": "nzChange";
    "nzSearchChange": "nzSearchChange";
    "nzSelectChange": "nzSelectChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJhbnNmZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXRyYW5zZmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgVHJhbnNmZXJDYW5Nb3ZlLCBUcmFuc2ZlckNoYW5nZSwgVHJhbnNmZXJEaXJlY3Rpb24sIFRyYW5zZmVySXRlbSwgVHJhbnNmZXJTZWFyY2hDaGFuZ2UsIFRyYW5zZmVyU2VsZWN0Q2hhbmdlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUcmFuc2ZlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgaTE4bjtcbiAgICBwcml2YXRlIG56VXBkYXRlSG9zdENsYXNzU2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQ7XG4gICAgcHJpdmF0ZSBsaXN0cztcbiAgICBsb2NhbGU6IGFueTtcbiAgICBsZWZ0RmlsdGVyOiBzdHJpbmc7XG4gICAgcmlnaHRGaWx0ZXI6IHN0cmluZztcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56RGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW107XG4gICAgbnpUaXRsZXM6IHN0cmluZ1tdO1xuICAgIG56T3BlcmF0aW9uczogc3RyaW5nW107XG4gICAgbnpMaXN0U3R5bGU6IG9iamVjdDtcbiAgICBuelNob3dTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgbnpJdGVtVW5pdDogc3RyaW5nO1xuICAgIG56SXRlbXNVbml0OiBzdHJpbmc7XG4gICAgbnpDYW5Nb3ZlOiAoYXJnOiBUcmFuc2ZlckNhbk1vdmUpID0+IE9ic2VydmFibGU8VHJhbnNmZXJJdGVtW10+O1xuICAgIG56UmVuZGVyTGlzdDogQXJyYXk8VGVtcGxhdGVSZWY8dm9pZD4gfCBudWxsPjtcbiAgICBuelJlbmRlcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgbnpGb290ZXI6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIG56U2hvd1NlYXJjaDogYm9vbGVhbjtcbiAgICBuekZpbHRlck9wdGlvbjogKGlucHV0VmFsdWU6IHN0cmluZywgaXRlbTogVHJhbnNmZXJJdGVtKSA9PiBib29sZWFuO1xuICAgIG56U2VhcmNoUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBuek5vdEZvdW5kQ29udGVudDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG56Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VHJhbnNmZXJDaGFuZ2U+O1xuICAgIHJlYWRvbmx5IG56U2VhcmNoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VHJhbnNmZXJTZWFyY2hDaGFuZ2U+O1xuICAgIHJlYWRvbmx5IG56U2VsZWN0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VHJhbnNmZXJTZWxlY3RDaGFuZ2U+O1xuICAgIGxlZnREYXRhU291cmNlOiBUcmFuc2Zlckl0ZW1bXTtcbiAgICByaWdodERhdGFTb3VyY2U6IFRyYW5zZmVySXRlbVtdO1xuICAgIHByaXZhdGUgc3BsaXREYXRhU291cmNlO1xuICAgIHByaXZhdGUgZ2V0Q2hlY2tlZERhdGE7XG4gICAgaGFuZGxlTGVmdFNlbGVjdEFsbDogKGNoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgaGFuZGxlUmlnaHRTZWxlY3RBbGw6IChjaGVja2VkOiBib29sZWFuKSA9PiB2b2lkO1xuICAgIGhhbmRsZUxlZnRTZWxlY3Q6IChpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHZvaWQ7XG4gICAgaGFuZGxlUmlnaHRTZWxlY3Q6IChpdGVtOiBUcmFuc2Zlckl0ZW0pID0+IHZvaWQ7XG4gICAgaGFuZGxlU2VsZWN0KGRpcmVjdGlvbjogVHJhbnNmZXJEaXJlY3Rpb24sIGNoZWNrZWQ6IGJvb2xlYW4sIGl0ZW0/OiBUcmFuc2Zlckl0ZW0pOiB2b2lkO1xuICAgIGhhbmRsZUZpbHRlckNoYW5nZShyZXQ6IHtcbiAgICAgICAgZGlyZWN0aW9uOiBUcmFuc2ZlckRpcmVjdGlvbjtcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9KTogdm9pZDtcbiAgICBsZWZ0QWN0aXZlOiBib29sZWFuO1xuICAgIHJpZ2h0QWN0aXZlOiBib29sZWFuO1xuICAgIHByaXZhdGUgdXBkYXRlT3BlcmF0aW9uU3RhdHVzO1xuICAgIG1vdmVUb0xlZnQ6ICgpID0+IHZvaWQ7XG4gICAgbW92ZVRvUmlnaHQ6ICgpID0+IHZvaWQ7XG4gICAgbW92ZVRvKGRpcmVjdGlvbjogVHJhbnNmZXJEaXJlY3Rpb24pOiB2b2lkO1xuICAgIHByaXZhdGUgdHJ1dGhNb3ZlVG87XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgaTE4bjogTnpJMThuU2VydmljZSwgbnpVcGRhdGVIb3N0Q2xhc3NTZXJ2aWNlOiBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIHByaXZhdGUgc2V0Q2xhc3NNYXA7XG4gICAgcHJpdmF0ZSBtYXJrRm9yQ2hlY2tBbGxMaXN0O1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==