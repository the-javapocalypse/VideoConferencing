/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { NzDropdownMenuComponent } from 'ng-zorro-antd/dropdown';
import { NzI18nInterface, NzI18nService } from 'ng-zorro-antd/i18n';
import * as ɵngcc0 from '@angular/core';
export declare type NzThFilterType = Array<{
    text: string;
    value: any;
    byDefault?: boolean;
}>;
export interface NzThItemInterface {
    text: string;
    value: any;
    checked: boolean;
}
export declare class NzThComponent implements OnChanges, OnInit, OnDestroy {
    private cdr;
    private i18n;
    hasFilterValue: boolean;
    filterVisible: boolean;
    multipleFilterList: NzThItemInterface[];
    singleFilterList: NzThItemInterface[];
    locale: NzI18nInterface['Table'];
    nzWidthChange$: Subject<unknown>;
    private destroy$;
    private hasDefaultFilter;
    nzDropdownMenuComponent: NzDropdownMenuComponent;
    nzSelections: Array<{
        text: string;
        onSelect(...args: any[]): any;
    }>;
    nzChecked: boolean;
    nzDisabled: boolean;
    nzIndeterminate: boolean;
    nzSortKey: string;
    nzFilterMultiple: boolean;
    nzWidth: string;
    nzLeft: string;
    nzRight: string;
    nzAlign: 'left' | 'right' | 'center';
    nzSort: 'ascend' | 'descend' | null;
    nzFilters: NzThFilterType;
    nzExpand: boolean;
    nzShowCheckbox: boolean;
    nzCustomFilter: boolean;
    nzShowSort: boolean;
    nzShowFilter: boolean;
    nzShowRowSelection: boolean;
    readonly nzCheckedChange: EventEmitter<boolean>;
    readonly nzSortChange: EventEmitter<string | null>;
    readonly nzSortChangeWithKey: EventEmitter<{
        key: string;
        value: string | null;
    }>;
    readonly nzFilterChange: EventEmitter<any>;
    updateSortValue(): void;
    setSortValue(value: 'ascend' | 'descend' | null): void;
    readonly filterList: NzThItemInterface[];
    readonly filterValue: any;
    updateFilterStatus(): void;
    search(): void;
    reset(): void;
    checkMultiple(filter: NzThItemInterface): void;
    checkSingle(filter: NzThItemInterface): void;
    hideDropDown(): void;
    dropDownVisibleChange(value: boolean): void;
    initMultipleFilterList(force?: boolean): void;
    initSingleFilterList(force?: boolean): void;
    checkDefaultFilters(): void;
    marForCheck(): void;
    constructor(cdr: ChangeDetectorRef, i18n: NzI18nService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzThComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzThComponent, "th:not(.nz-disable-th):not([mat-sort-header]):not([mat-header-cell])", never, {
    "nzSelections": "nzSelections";
    "nzChecked": "nzChecked";
    "nzDisabled": "nzDisabled";
    "nzIndeterminate": "nzIndeterminate";
    "nzFilterMultiple": "nzFilterMultiple";
    "nzSort": "nzSort";
    "nzFilters": "nzFilters";
    "nzExpand": "nzExpand";
    "nzShowCheckbox": "nzShowCheckbox";
    "nzCustomFilter": "nzCustomFilter";
    "nzShowSort": "nzShowSort";
    "nzShowFilter": "nzShowFilter";
    "nzShowRowSelection": "nzShowRowSelection";
    "nzSortKey": "nzSortKey";
    "nzWidth": "nzWidth";
    "nzLeft": "nzLeft";
    "nzRight": "nzRight";
    "nzAlign": "nzAlign";
}, {
    "nzCheckedChange": "nzCheckedChange";
    "nzSortChange": "nzSortChange";
    "nzSortChangeWithKey": "nzSortChangeWithKey";
    "nzFilterChange": "nzFilterChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdGguY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXRoLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56RHJvcGRvd25NZW51Q29tcG9uZW50IH0gZnJvbSAnbmctem9ycm8tYW50ZC9kcm9wZG93bic7XG5pbXBvcnQgeyBOekkxOG5JbnRlcmZhY2UsIE56STE4blNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBOelRoRmlsdGVyVHlwZSA9IEFycmF5PHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IGFueTtcbiAgICBieURlZmF1bHQ/OiBib29sZWFuO1xufT47XG5leHBvcnQgaW50ZXJmYWNlIE56VGhJdGVtSW50ZXJmYWNlIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IGFueTtcbiAgICBjaGVja2VkOiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgaTE4bjtcbiAgICBoYXNGaWx0ZXJWYWx1ZTogYm9vbGVhbjtcbiAgICBmaWx0ZXJWaXNpYmxlOiBib29sZWFuO1xuICAgIG11bHRpcGxlRmlsdGVyTGlzdDogTnpUaEl0ZW1JbnRlcmZhY2VbXTtcbiAgICBzaW5nbGVGaWx0ZXJMaXN0OiBOelRoSXRlbUludGVyZmFjZVtdO1xuICAgIGxvY2FsZTogTnpJMThuSW50ZXJmYWNlWydUYWJsZSddO1xuICAgIG56V2lkdGhDaGFuZ2UkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBoYXNEZWZhdWx0RmlsdGVyO1xuICAgIG56RHJvcGRvd25NZW51Q29tcG9uZW50OiBOekRyb3Bkb3duTWVudUNvbXBvbmVudDtcbiAgICBuelNlbGVjdGlvbnM6IEFycmF5PHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICBvblNlbGVjdCguLi5hcmdzOiBhbnlbXSk6IGFueTtcbiAgICB9PjtcbiAgICBuekNoZWNrZWQ6IGJvb2xlYW47XG4gICAgbnpEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBuekluZGV0ZXJtaW5hdGU6IGJvb2xlYW47XG4gICAgbnpTb3J0S2V5OiBzdHJpbmc7XG4gICAgbnpGaWx0ZXJNdWx0aXBsZTogYm9vbGVhbjtcbiAgICBueldpZHRoOiBzdHJpbmc7XG4gICAgbnpMZWZ0OiBzdHJpbmc7XG4gICAgbnpSaWdodDogc3RyaW5nO1xuICAgIG56QWxpZ246ICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJztcbiAgICBuelNvcnQ6ICdhc2NlbmQnIHwgJ2Rlc2NlbmQnIHwgbnVsbDtcbiAgICBuekZpbHRlcnM6IE56VGhGaWx0ZXJUeXBlO1xuICAgIG56RXhwYW5kOiBib29sZWFuO1xuICAgIG56U2hvd0NoZWNrYm94OiBib29sZWFuO1xuICAgIG56Q3VzdG9tRmlsdGVyOiBib29sZWFuO1xuICAgIG56U2hvd1NvcnQ6IGJvb2xlYW47XG4gICAgbnpTaG93RmlsdGVyOiBib29sZWFuO1xuICAgIG56U2hvd1Jvd1NlbGVjdGlvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBuekNoZWNrZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBuelNvcnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudWxsPjtcbiAgICByZWFkb25seSBuelNvcnRDaGFuZ2VXaXRoS2V5OiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBrZXk6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IHN0cmluZyB8IG51bGw7XG4gICAgfT47XG4gICAgcmVhZG9ubHkgbnpGaWx0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHVwZGF0ZVNvcnRWYWx1ZSgpOiB2b2lkO1xuICAgIHNldFNvcnRWYWx1ZSh2YWx1ZTogJ2FzY2VuZCcgfCAnZGVzY2VuZCcgfCBudWxsKTogdm9pZDtcbiAgICByZWFkb25seSBmaWx0ZXJMaXN0OiBOelRoSXRlbUludGVyZmFjZVtdO1xuICAgIHJlYWRvbmx5IGZpbHRlclZhbHVlOiBhbnk7XG4gICAgdXBkYXRlRmlsdGVyU3RhdHVzKCk6IHZvaWQ7XG4gICAgc2VhcmNoKCk6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBjaGVja011bHRpcGxlKGZpbHRlcjogTnpUaEl0ZW1JbnRlcmZhY2UpOiB2b2lkO1xuICAgIGNoZWNrU2luZ2xlKGZpbHRlcjogTnpUaEl0ZW1JbnRlcmZhY2UpOiB2b2lkO1xuICAgIGhpZGVEcm9wRG93bigpOiB2b2lkO1xuICAgIGRyb3BEb3duVmlzaWJsZUNoYW5nZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgaW5pdE11bHRpcGxlRmlsdGVyTGlzdChmb3JjZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGluaXRTaW5nbGVGaWx0ZXJMaXN0KGZvcmNlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2hlY2tEZWZhdWx0RmlsdGVycygpOiB2b2lkO1xuICAgIG1hckZvckNoZWNrKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgaTE4bjogTnpJMThuU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19