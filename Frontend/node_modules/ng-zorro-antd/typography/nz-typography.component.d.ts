/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EmbeddedViewRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { NzConfigService, NzDomEventService } from 'ng-zorro-antd/core';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { NzTextCopyComponent } from './nz-text-copy.component';
import { NzTextEditComponent } from './nz-text-edit.component';
import * as ɵngcc0 from '@angular/core';
export declare class NzTypographyComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    nzConfigService: NzConfigService;
    private host;
    private cdr;
    private viewContainerRef;
    private renderer;
    private platform;
    private i18n;
    private nzDomEventService;
    nzCopyable: boolean;
    nzEditable: boolean;
    nzDisabled: boolean;
    nzExpandable: boolean;
    nzEllipsis: boolean;
    nzContent: string;
    nzEllipsisRows: number;
    nzType: 'secondary' | 'warning' | 'danger' | undefined;
    nzCopyText: string | undefined;
    readonly nzContentChange: EventEmitter<string>;
    readonly nzCopy: EventEmitter<string>;
    readonly nzExpandChange: EventEmitter<void>;
    textEditRef: NzTextEditComponent;
    textCopyRef: NzTextCopyComponent;
    ellipsisContainer: ElementRef<HTMLSpanElement>;
    expandableBtn: ElementRef<HTMLSpanElement>;
    contentTemplate: TemplateRef<{
        content: string;
    }>;
    locale: any;
    editing: boolean;
    ellipsisText: string | undefined;
    cssEllipsis: boolean;
    isEllipsis: boolean;
    expanded: boolean;
    ellipsisStr: string;
    readonly canCssEllipsis: boolean;
    private viewInit;
    private rfaId;
    private destroy$;
    private windowResizeSubscription;
    readonly copyText: string;
    constructor(nzConfigService: NzConfigService, host: ElementRef<HTMLElement>, cdr: ChangeDetectorRef, viewContainerRef: ViewContainerRef, renderer: Renderer2, platform: Platform, i18n: NzI18nService, nzDomEventService: NzDomEventService);
    onTextCopy(text: string): void;
    onStartEditing(): void;
    onEndEditing(text: string): void;
    onExpand(): void;
    canUseCSSEllipsis(): boolean;
    renderOnNextFrame(): void;
    getOriginContentViewRef(): {
        viewRef: EmbeddedViewRef<{
            content: string;
        }>;
        removeView(): void;
    };
    syncEllipsis(): void;
    private renderAndSubscribeWindowResize;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTypographyComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTypographyComponent, "  nz-typography,  [nz-typography],  p[nz-paragraph],  span[nz-text],  h1[nz-title], h2[nz-title], h3[nz-title], h4[nz-title]  ", ["nzTypography"], {
    "nzCopyable": "nzCopyable";
    "nzEditable": "nzEditable";
    "nzDisabled": "nzDisabled";
    "nzExpandable": "nzExpandable";
    "nzEllipsis": "nzEllipsis";
    "nzContent": "nzContent";
    "nzEllipsisRows": "nzEllipsisRows";
    "nzType": "nzType";
    "nzCopyText": "nzCopyText";
}, {
    "nzContentChange": "nzContentChange";
    "nzCopy": "nzCopy";
    "nzExpandChange": "nzExpandChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHlwb2dyYXBoeS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibnotdHlwb2dyYXBoeS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTREQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekNvbmZpZ1NlcnZpY2UsIE56RG9tRXZlbnRTZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgTnpUZXh0Q29weUNvbXBvbmVudCB9IGZyb20gJy4vbnotdGV4dC1jb3B5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRleHRFZGl0Q29tcG9uZW50IH0gZnJvbSAnLi9uei10ZXh0LWVkaXQuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VHlwb2dyYXBoeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIHByaXZhdGUgaG9zdDtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIHByaXZhdGUgaTE4bjtcbiAgICBwcml2YXRlIG56RG9tRXZlbnRTZXJ2aWNlO1xuICAgIG56Q29weWFibGU6IGJvb2xlYW47XG4gICAgbnpFZGl0YWJsZTogYm9vbGVhbjtcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56RXhwYW5kYWJsZTogYm9vbGVhbjtcbiAgICBuekVsbGlwc2lzOiBib29sZWFuO1xuICAgIG56Q29udGVudDogc3RyaW5nO1xuICAgIG56RWxsaXBzaXNSb3dzOiBudW1iZXI7XG4gICAgbnpUeXBlOiAnc2Vjb25kYXJ5JyB8ICd3YXJuaW5nJyB8ICdkYW5nZXInIHwgdW5kZWZpbmVkO1xuICAgIG56Q29weVRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICByZWFkb25seSBuekNvbnRlbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHJlYWRvbmx5IG56Q29weTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgcmVhZG9ubHkgbnpFeHBhbmRDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICB0ZXh0RWRpdFJlZjogTnpUZXh0RWRpdENvbXBvbmVudDtcbiAgICB0ZXh0Q29weVJlZjogTnpUZXh0Q29weUNvbXBvbmVudDtcbiAgICBlbGxpcHNpc0NvbnRhaW5lcjogRWxlbWVudFJlZjxIVE1MU3BhbkVsZW1lbnQ+O1xuICAgIGV4cGFuZGFibGVCdG46IEVsZW1lbnRSZWY8SFRNTFNwYW5FbGVtZW50PjtcbiAgICBjb250ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgIH0+O1xuICAgIGxvY2FsZTogYW55O1xuICAgIGVkaXRpbmc6IGJvb2xlYW47XG4gICAgZWxsaXBzaXNUZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgY3NzRWxsaXBzaXM6IGJvb2xlYW47XG4gICAgaXNFbGxpcHNpczogYm9vbGVhbjtcbiAgICBleHBhbmRlZDogYm9vbGVhbjtcbiAgICBlbGxpcHNpc1N0cjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNhbkNzc0VsbGlwc2lzOiBib29sZWFuO1xuICAgIHByaXZhdGUgdmlld0luaXQ7XG4gICAgcHJpdmF0ZSByZmFJZDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgd2luZG93UmVzaXplU3Vic2NyaXB0aW9uO1xuICAgIHJlYWRvbmx5IGNvcHlUZXh0OiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIGhvc3Q6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBwbGF0Zm9ybTogUGxhdGZvcm0sIGkxOG46IE56STE4blNlcnZpY2UsIG56RG9tRXZlbnRTZXJ2aWNlOiBOekRvbUV2ZW50U2VydmljZSk7XG4gICAgb25UZXh0Q29weSh0ZXh0OiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uU3RhcnRFZGl0aW5nKCk6IHZvaWQ7XG4gICAgb25FbmRFZGl0aW5nKHRleHQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgb25FeHBhbmQoKTogdm9pZDtcbiAgICBjYW5Vc2VDU1NFbGxpcHNpcygpOiBib29sZWFuO1xuICAgIHJlbmRlck9uTmV4dEZyYW1lKCk6IHZvaWQ7XG4gICAgZ2V0T3JpZ2luQ29udGVudFZpZXdSZWYoKToge1xuICAgICAgICB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8e1xuICAgICAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgICAgICB9PjtcbiAgICAgICAgcmVtb3ZlVmlldygpOiB2b2lkO1xuICAgIH07XG4gICAgc3luY0VsbGlwc2lzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZW5kZXJBbmRTdWJzY3JpYmVXaW5kb3dSZXNpemU7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19