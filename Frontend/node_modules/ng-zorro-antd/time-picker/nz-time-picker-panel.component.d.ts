/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, DebugElement, ElementRef, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NzUpdateHostClassService as UpdateCls } from 'ng-zorro-antd/core';
import { NzTimeValueAccessorDirective } from './nz-time-value-accessor.directive';
import { TimeHolder } from './time-holder';
import * as ɵngcc0 from '@angular/core';
export declare type NzTimePickerUnit = 'hour' | 'minute' | 'second' | '12-hour';
export declare class NzTimePickerPanelComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private element;
    private updateCls;
    private cdr;
    private _nzHourStep;
    private _nzMinuteStep;
    private _nzSecondStep;
    private unsubscribe$;
    private onChange;
    private onTouch;
    private _format;
    private _disabledHours;
    private _disabledMinutes;
    private _disabledSeconds;
    private _allowEmpty;
    prefixCls: string;
    time: TimeHolder;
    hourEnabled: boolean;
    minuteEnabled: boolean;
    secondEnabled: boolean;
    enabledColumns: number;
    hourRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    minuteRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    secondRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    use12HoursRange: ReadonlyArray<{
        index: number;
        value: string;
    }>;
    nzTimeValueAccessorDirective: NzTimeValueAccessorDirective;
    hourListElement: DebugElement;
    minuteListElement: DebugElement;
    secondListElement: DebugElement;
    use12HoursListElement: DebugElement;
    nzInDatePicker: boolean;
    nzAddOn: TemplateRef<void>;
    nzHideDisabledOptions: boolean;
    nzClearText: string;
    nzPlaceHolder: string;
    nzUse12Hours: boolean;
    opened: boolean;
    nzDefaultOpenValue: Date;
    nzAllowEmpty: boolean;
    nzDisabledHours: () => number[];
    nzDisabledMinutes: (hour: number) => number[];
    nzDisabledSeconds: (hour: number, minute: number) => number[];
    format: string;
    nzHourStep: number;
    nzMinuteStep: number;
    nzSecondStep: number;
    selectInputRange(): void;
    buildHours(): void;
    buildMinutes(): void;
    buildSeconds(): void;
    build12Hours(): void;
    buildTimes(): void;
    selectHour(hour: {
        index: number;
        disabled: boolean;
    }): void;
    selectMinute(minute: {
        index: number;
        disabled: boolean;
    }): void;
    selectSecond(second: {
        index: number;
        disabled: boolean;
    }): void;
    select12Hours(value: {
        index: number;
        value: string;
    }): void;
    scrollToSelected(instance: HTMLElement, index: number, duration: number | undefined, unit: NzTimePickerUnit): void;
    translateIndex(index: number, unit: NzTimePickerUnit): number;
    scrollTo(element: HTMLElement, to: number, duration: number): void;
    calcIndex(array: number[], index: number): number;
    protected changed(): void;
    protected touched(): void;
    private setClassMap;
    isSelectedHour(hour: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedMinute(minute: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedSecond(second: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelected12Hours(value: {
        index: number;
        value: string;
    }): boolean;
    initPosition(): void;
    constructor(element: ElementRef, updateCls: UpdateCls, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (value: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTimePickerPanelComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTimePickerPanelComponent, "nz-time-picker-panel", ["nzTimePickerPanel"], {
    "nzInDatePicker": "nzInDatePicker";
    "nzHideDisabledOptions": "nzHideDisabledOptions";
    "nzUse12Hours": "nzUse12Hours";
    "opened": "opened";
    "nzDefaultOpenValue": "nzDefaultOpenValue";
    "nzAllowEmpty": "nzAllowEmpty";
    "nzDisabledHours": "nzDisabledHours";
    "nzDisabledMinutes": "nzDisabledMinutes";
    "nzDisabledSeconds": "nzDisabledSeconds";
    "format": "format";
    "nzHourStep": "nzHourStep";
    "nzMinuteStep": "nzMinuteStep";
    "nzSecondStep": "nzSecondStep";
    "nzAddOn": "nzAddOn";
    "nzClearText": "nzClearText";
    "nzPlaceHolder": "nzPlaceHolder";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdGltZS1waWNrZXItcGFuZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXRpbWUtcGlja2VyLXBhbmVsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0hBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGVidWdFbGVtZW50LCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgYXMgVXBkYXRlQ2xzIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmltcG9ydCB7IE56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmUgfSBmcm9tICcuL256LXRpbWUtdmFsdWUtYWNjZXNzb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRpbWVIb2xkZXIgfSBmcm9tICcuL3RpbWUtaG9sZGVyJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTnpUaW1lUGlja2VyVW5pdCA9ICdob3VyJyB8ICdtaW51dGUnIHwgJ3NlY29uZCcgfCAnMTItaG91cic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelRpbWVQaWNrZXJQYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVDbHM7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBfbnpIb3VyU3RlcDtcbiAgICBwcml2YXRlIF9uek1pbnV0ZVN0ZXA7XG4gICAgcHJpdmF0ZSBfbnpTZWNvbmRTdGVwO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmUkO1xuICAgIHByaXZhdGUgb25DaGFuZ2U7XG4gICAgcHJpdmF0ZSBvblRvdWNoO1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIF9kaXNhYmxlZEhvdXJzO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkTWludXRlcztcbiAgICBwcml2YXRlIF9kaXNhYmxlZFNlY29uZHM7XG4gICAgcHJpdmF0ZSBfYWxsb3dFbXB0eTtcbiAgICBwcmVmaXhDbHM6IHN0cmluZztcbiAgICB0aW1lOiBUaW1lSG9sZGVyO1xuICAgIGhvdXJFbmFibGVkOiBib29sZWFuO1xuICAgIG1pbnV0ZUVuYWJsZWQ6IGJvb2xlYW47XG4gICAgc2Vjb25kRW5hYmxlZDogYm9vbGVhbjtcbiAgICBlbmFibGVkQ29sdW1uczogbnVtYmVyO1xuICAgIGhvdXJSYW5nZTogUmVhZG9ubHlBcnJheTx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0+O1xuICAgIG1pbnV0ZVJhbmdlOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfT47XG4gICAgc2Vjb25kUmFuZ2U6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9PjtcbiAgICB1c2UxMkhvdXJzUmFuZ2U6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0+O1xuICAgIG56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmU6IE56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmU7XG4gICAgaG91ckxpc3RFbGVtZW50OiBEZWJ1Z0VsZW1lbnQ7XG4gICAgbWludXRlTGlzdEVsZW1lbnQ6IERlYnVnRWxlbWVudDtcbiAgICBzZWNvbmRMaXN0RWxlbWVudDogRGVidWdFbGVtZW50O1xuICAgIHVzZTEySG91cnNMaXN0RWxlbWVudDogRGVidWdFbGVtZW50O1xuICAgIG56SW5EYXRlUGlja2VyOiBib29sZWFuO1xuICAgIG56QWRkT246IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIG56SGlkZURpc2FibGVkT3B0aW9uczogYm9vbGVhbjtcbiAgICBuekNsZWFyVGV4dDogc3RyaW5nO1xuICAgIG56UGxhY2VIb2xkZXI6IHN0cmluZztcbiAgICBuelVzZTEySG91cnM6IGJvb2xlYW47XG4gICAgb3BlbmVkOiBib29sZWFuO1xuICAgIG56RGVmYXVsdE9wZW5WYWx1ZTogRGF0ZTtcbiAgICBuekFsbG93RW1wdHk6IGJvb2xlYW47XG4gICAgbnpEaXNhYmxlZEhvdXJzOiAoKSA9PiBudW1iZXJbXTtcbiAgICBuekRpc2FibGVkTWludXRlczogKGhvdXI6IG51bWJlcikgPT4gbnVtYmVyW107XG4gICAgbnpEaXNhYmxlZFNlY29uZHM6IChob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyKSA9PiBudW1iZXJbXTtcbiAgICBmb3JtYXQ6IHN0cmluZztcbiAgICBuekhvdXJTdGVwOiBudW1iZXI7XG4gICAgbnpNaW51dGVTdGVwOiBudW1iZXI7XG4gICAgbnpTZWNvbmRTdGVwOiBudW1iZXI7XG4gICAgc2VsZWN0SW5wdXRSYW5nZSgpOiB2b2lkO1xuICAgIGJ1aWxkSG91cnMoKTogdm9pZDtcbiAgICBidWlsZE1pbnV0ZXMoKTogdm9pZDtcbiAgICBidWlsZFNlY29uZHMoKTogdm9pZDtcbiAgICBidWlsZDEySG91cnMoKTogdm9pZDtcbiAgICBidWlsZFRpbWVzKCk6IHZvaWQ7XG4gICAgc2VsZWN0SG91cihob3VyOiB7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0pOiB2b2lkO1xuICAgIHNlbGVjdE1pbnV0ZShtaW51dGU6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IHZvaWQ7XG4gICAgc2VsZWN0U2Vjb25kKHNlY29uZDoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogdm9pZDtcbiAgICBzZWxlY3QxMkhvdXJzKHZhbHVlOiB7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfSk6IHZvaWQ7XG4gICAgc2Nyb2xsVG9TZWxlY3RlZChpbnN0YW5jZTogSFRNTEVsZW1lbnQsIGluZGV4OiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQsIHVuaXQ6IE56VGltZVBpY2tlclVuaXQpOiB2b2lkO1xuICAgIHRyYW5zbGF0ZUluZGV4KGluZGV4OiBudW1iZXIsIHVuaXQ6IE56VGltZVBpY2tlclVuaXQpOiBudW1iZXI7XG4gICAgc2Nyb2xsVG8oZWxlbWVudDogSFRNTEVsZW1lbnQsIHRvOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIGNhbGNJbmRleChhcnJheTogbnVtYmVyW10sIGluZGV4OiBudW1iZXIpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGNoYW5nZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdG91Y2hlZCgpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0Q2xhc3NNYXA7XG4gICAgaXNTZWxlY3RlZEhvdXIoaG91cjoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkTWludXRlKG1pbnV0ZToge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkU2Vjb25kKHNlY29uZDoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkMTJIb3Vycyh2YWx1ZToge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0pOiBib29sZWFuO1xuICAgIGluaXRQb3NpdGlvbigpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHVwZGF0ZUNsczogVXBkYXRlQ2xzLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBEYXRlKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXX0=