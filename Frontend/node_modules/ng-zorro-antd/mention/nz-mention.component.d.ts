/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { NzMentionTriggerDirective } from './nz-mention-trigger';
import { NzMentionService } from './nz-mention.service';
import * as ɵngcc0 from '@angular/core';
export interface MentionOnSearchTypes {
    value: string;
    prefix: string;
}
export interface Mention {
    startPos: number;
    endPos: number;
    mention: string;
}
export declare type MentionPlacement = 'top' | 'bottom';
export declare class NzMentionComponent implements OnDestroy, OnInit, OnChanges {
    private ngDocument;
    private changeDetectorRef;
    private overlay;
    private viewContainerRef;
    private nzMentionService;
    nzValueWith: (value: any) => string;
    nzPrefix: string | string[];
    nzLoading: boolean;
    nzNotFoundContent: string;
    nzPlacement: MentionPlacement;
    nzSuggestions: string[];
    readonly nzOnSelect: EventEmitter<string | {}>;
    readonly nzOnSearchChange: EventEmitter<MentionOnSearchTypes>;
    trigger: NzMentionTriggerDirective;
    suggestionsTemp: TemplateRef<void>;
    suggestionChild: TemplateRef<{
        $implicit: any;
    }>;
    isOpen: boolean;
    filteredSuggestions: string[];
    suggestionTemplate: TemplateRef<{
        $implicit: any;
    }> | null;
    activeIndex: number;
    private previousValue;
    private cursorMention;
    private cursorMentionStart;
    private cursorMentionEnd;
    private overlayRef;
    private portal;
    private positionStrategy;
    private overlayBackdropClickSubscription;
    private readonly triggerNativeElement;
    constructor(ngDocument: any, // tslint:disable-line:no-any
    changeDetectorRef: ChangeDetectorRef, overlay: Overlay, viewContainerRef: ViewContainerRef, nzMentionService: NzMentionService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    closeDropdown(): void;
    openDropdown(): void;
    getMentions(): string[];
    selectSuggestion(suggestion: string | {}): void;
    private handleInput;
    private handleKeydown;
    private handleClick;
    private bindTriggerEvents;
    private suggestionsFilter;
    private resetDropdown;
    private setNextItemActive;
    private setPreviousItemActive;
    private canOpen;
    private resetCursorMention;
    private updatePositions;
    private subscribeOverlayBackdropClick;
    private attachOverlay;
    private getOverlayConfig;
    private getOverlayPosition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzMentionComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzMentionComponent, "nz-mention", ["nzMention"], {
    "nzValueWith": "nzValueWith";
    "nzPrefix": "nzPrefix";
    "nzLoading": "nzLoading";
    "nzNotFoundContent": "nzNotFoundContent";
    "nzPlacement": "nzPlacement";
    "nzSuggestions": "nzSuggestions";
}, {
    "nzOnSelect": "nzOnSelect";
    "nzOnSearchChange": "nzOnSearchChange";
}, ["suggestionChild"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotbWVudGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibnotbWVudGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0VBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56TWVudGlvblRyaWdnZXJEaXJlY3RpdmUgfSBmcm9tICcuL256LW1lbnRpb24tdHJpZ2dlcic7XG5pbXBvcnQgeyBOek1lbnRpb25TZXJ2aWNlIH0gZnJvbSAnLi9uei1tZW50aW9uLnNlcnZpY2UnO1xuZXhwb3J0IGludGVyZmFjZSBNZW50aW9uT25TZWFyY2hUeXBlcyB7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBwcmVmaXg6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTWVudGlvbiB7XG4gICAgc3RhcnRQb3M6IG51bWJlcjtcbiAgICBlbmRQb3M6IG51bWJlcjtcbiAgICBtZW50aW9uOiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSB0eXBlIE1lbnRpb25QbGFjZW1lbnQgPSAndG9wJyB8ICdib3R0b20nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpNZW50aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBuZ0RvY3VtZW50O1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIG56TWVudGlvblNlcnZpY2U7XG4gICAgbnpWYWx1ZVdpdGg6ICh2YWx1ZTogYW55KSA9PiBzdHJpbmc7XG4gICAgbnpQcmVmaXg6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIG56TG9hZGluZzogYm9vbGVhbjtcbiAgICBuek5vdEZvdW5kQ29udGVudDogc3RyaW5nO1xuICAgIG56UGxhY2VtZW50OiBNZW50aW9uUGxhY2VtZW50O1xuICAgIG56U3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xuICAgIHJlYWRvbmx5IG56T25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCB7fT47XG4gICAgcmVhZG9ubHkgbnpPblNlYXJjaENoYW5nZTogRXZlbnRFbWl0dGVyPE1lbnRpb25PblNlYXJjaFR5cGVzPjtcbiAgICB0cmlnZ2VyOiBOek1lbnRpb25UcmlnZ2VyRGlyZWN0aXZlO1xuICAgIHN1Z2dlc3Rpb25zVGVtcDogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgc3VnZ2VzdGlvbkNoaWxkOiBUZW1wbGF0ZVJlZjx7XG4gICAgICAgICRpbXBsaWNpdDogYW55O1xuICAgIH0+O1xuICAgIGlzT3BlbjogYm9vbGVhbjtcbiAgICBmaWx0ZXJlZFN1Z2dlc3Rpb25zOiBzdHJpbmdbXTtcbiAgICBzdWdnZXN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgJGltcGxpY2l0OiBhbnk7XG4gICAgfT4gfCBudWxsO1xuICAgIGFjdGl2ZUluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBwcmV2aW91c1ZhbHVlO1xuICAgIHByaXZhdGUgY3Vyc29yTWVudGlvbjtcbiAgICBwcml2YXRlIGN1cnNvck1lbnRpb25TdGFydDtcbiAgICBwcml2YXRlIGN1cnNvck1lbnRpb25FbmQ7XG4gICAgcHJpdmF0ZSBvdmVybGF5UmVmO1xuICAgIHByaXZhdGUgcG9ydGFsO1xuICAgIHByaXZhdGUgcG9zaXRpb25TdHJhdGVneTtcbiAgICBwcml2YXRlIG92ZXJsYXlCYWNrZHJvcENsaWNrU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJpZ2dlck5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IobmdEb2N1bWVudDogYW55LCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWFueVxuICAgIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgb3ZlcmxheTogT3ZlcmxheSwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgbnpNZW50aW9uU2VydmljZTogTnpNZW50aW9uU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGNsb3NlRHJvcGRvd24oKTogdm9pZDtcbiAgICBvcGVuRHJvcGRvd24oKTogdm9pZDtcbiAgICBnZXRNZW50aW9ucygpOiBzdHJpbmdbXTtcbiAgICBzZWxlY3RTdWdnZXN0aW9uKHN1Z2dlc3Rpb246IHN0cmluZyB8IHt9KTogdm9pZDtcbiAgICBwcml2YXRlIGhhbmRsZUlucHV0O1xuICAgIHByaXZhdGUgaGFuZGxlS2V5ZG93bjtcbiAgICBwcml2YXRlIGhhbmRsZUNsaWNrO1xuICAgIHByaXZhdGUgYmluZFRyaWdnZXJFdmVudHM7XG4gICAgcHJpdmF0ZSBzdWdnZXN0aW9uc0ZpbHRlcjtcbiAgICBwcml2YXRlIHJlc2V0RHJvcGRvd247XG4gICAgcHJpdmF0ZSBzZXROZXh0SXRlbUFjdGl2ZTtcbiAgICBwcml2YXRlIHNldFByZXZpb3VzSXRlbUFjdGl2ZTtcbiAgICBwcml2YXRlIGNhbk9wZW47XG4gICAgcHJpdmF0ZSByZXNldEN1cnNvck1lbnRpb247XG4gICAgcHJpdmF0ZSB1cGRhdGVQb3NpdGlvbnM7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVPdmVybGF5QmFja2Ryb3BDbGljaztcbiAgICBwcml2YXRlIGF0dGFjaE92ZXJsYXk7XG4gICAgcHJpdmF0ZSBnZXRPdmVybGF5Q29uZmlnO1xuICAgIHByaXZhdGUgZ2V0T3ZlcmxheVBvc2l0aW9uO1xufVxuIl19