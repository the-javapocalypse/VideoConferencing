/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { NgStyleInterface, NzConfigService } from 'ng-zorro-antd/core';
import { NzProgressCirclePath, NzProgressFormatter, NzProgressGapPositionType, NzProgressStatusType, NzProgressStrokeColorType, NzProgressStrokeLinecapType, NzProgressTypeType } from './nz-progress.definitions';
import * as ɵngcc0 from '@angular/core';
export declare class NzProgressComponent implements OnChanges, OnInit, OnDestroy {
    nzConfigService: NzConfigService;
    nzShowInfo: boolean;
    nzWidth: number;
    nzStrokeColor: NzProgressStrokeColorType;
    nzSize: 'default' | 'small';
    nzFormat?: NzProgressFormatter;
    nzSuccessPercent?: number;
    nzPercent: number;
    nzStrokeWidth: number;
    nzGapDegree: number;
    nzStatus: NzProgressStatusType;
    nzType: NzProgressTypeType;
    nzGapPosition: NzProgressGapPositionType;
    nzStrokeLinecap: NzProgressStrokeLinecapType;
    /** Gradient style when `nzType` is `line`. */
    lineGradient: string | null;
    /** If user uses gradient color. */
    isGradient: boolean;
    /**
     * Each progress whose `nzType` is circle or dashboard should have unique id to
     * define `<linearGradient>`.
     */
    gradientId: number;
    /** Paths to rendered in the template. */
    progressCirclePath: NzProgressCirclePath[];
    circleGradient: Array<{
        offset: string;
        color: string;
    }>;
    trailPathStyle: NgStyleInterface;
    pathString: string;
    icon: string;
    trackByFn: (index: number) => string;
    readonly formatter: NzProgressFormatter;
    readonly status: NzProgressStatusType;
    readonly strokeWidth: number;
    readonly isCircleStyle: boolean;
    private cachedStatus;
    private inferredStatus;
    private destroy$;
    constructor(nzConfigService: NzConfigService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateIcon;
    /**
     * Calculate paths when the type is circle or dashboard.
     */
    private getCirclePaths;
    private setStrokeColor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzProgressComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzProgressComponent, "nz-progress", ["nzProgress"], {
    "nzWidth": "nzWidth";
    "nzPercent": "nzPercent";
    "nzType": "nzType";
    "nzShowInfo": "nzShowInfo";
    "nzStrokeColor": "nzStrokeColor";
    "nzSize": "nzSize";
    "nzFormat": "nzFormat";
    "nzSuccessPercent": "nzSuccessPercent";
    "nzStrokeWidth": "nzStrokeWidth";
    "nzGapDegree": "nzGapDegree";
    "nzStatus": "nzStatus";
    "nzGapPosition": "nzGapPosition";
    "nzStrokeLinecap": "nzStrokeLinecap";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotcHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbURBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1N0eWxlSW50ZXJmYWNlLCBOekNvbmZpZ1NlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUnO1xuaW1wb3J0IHsgTnpQcm9ncmVzc0NpcmNsZVBhdGgsIE56UHJvZ3Jlc3NGb3JtYXR0ZXIsIE56UHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUsIE56UHJvZ3Jlc3NTdGF0dXNUeXBlLCBOelByb2dyZXNzU3Ryb2tlQ29sb3JUeXBlLCBOelByb2dyZXNzU3Ryb2tlTGluZWNhcFR5cGUsIE56UHJvZ3Jlc3NUeXBlVHlwZSB9IGZyb20gJy4vbnotcHJvZ3Jlc3MuZGVmaW5pdGlvbnMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIG56U2hvd0luZm86IGJvb2xlYW47XG4gICAgbnpXaWR0aDogbnVtYmVyO1xuICAgIG56U3Ryb2tlQ29sb3I6IE56UHJvZ3Jlc3NTdHJva2VDb2xvclR5cGU7XG4gICAgbnpTaXplOiAnZGVmYXVsdCcgfCAnc21hbGwnO1xuICAgIG56Rm9ybWF0PzogTnpQcm9ncmVzc0Zvcm1hdHRlcjtcbiAgICBuelN1Y2Nlc3NQZXJjZW50PzogbnVtYmVyO1xuICAgIG56UGVyY2VudDogbnVtYmVyO1xuICAgIG56U3Ryb2tlV2lkdGg6IG51bWJlcjtcbiAgICBuekdhcERlZ3JlZTogbnVtYmVyO1xuICAgIG56U3RhdHVzOiBOelByb2dyZXNzU3RhdHVzVHlwZTtcbiAgICBuelR5cGU6IE56UHJvZ3Jlc3NUeXBlVHlwZTtcbiAgICBuekdhcFBvc2l0aW9uOiBOelByb2dyZXNzR2FwUG9zaXRpb25UeXBlO1xuICAgIG56U3Ryb2tlTGluZWNhcDogTnpQcm9ncmVzc1N0cm9rZUxpbmVjYXBUeXBlO1xuICAgIC8qKiBHcmFkaWVudCBzdHlsZSB3aGVuIGBuelR5cGVgIGlzIGBsaW5lYC4gKi9cbiAgICBsaW5lR3JhZGllbnQ6IHN0cmluZyB8IG51bGw7XG4gICAgLyoqIElmIHVzZXIgdXNlcyBncmFkaWVudCBjb2xvci4gKi9cbiAgICBpc0dyYWRpZW50OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEVhY2ggcHJvZ3Jlc3Mgd2hvc2UgYG56VHlwZWAgaXMgY2lyY2xlIG9yIGRhc2hib2FyZCBzaG91bGQgaGF2ZSB1bmlxdWUgaWQgdG9cbiAgICAgKiBkZWZpbmUgYDxsaW5lYXJHcmFkaWVudD5gLlxuICAgICAqL1xuICAgIGdyYWRpZW50SWQ6IG51bWJlcjtcbiAgICAvKiogUGF0aHMgdG8gcmVuZGVyZWQgaW4gdGhlIHRlbXBsYXRlLiAqL1xuICAgIHByb2dyZXNzQ2lyY2xlUGF0aDogTnpQcm9ncmVzc0NpcmNsZVBhdGhbXTtcbiAgICBjaXJjbGVHcmFkaWVudDogQXJyYXk8e1xuICAgICAgICBvZmZzZXQ6IHN0cmluZztcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICB9PjtcbiAgICB0cmFpbFBhdGhTdHlsZTogTmdTdHlsZUludGVyZmFjZTtcbiAgICBwYXRoU3RyaW5nOiBzdHJpbmc7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIHRyYWNrQnlGbjogKGluZGV4OiBudW1iZXIpID0+IHN0cmluZztcbiAgICByZWFkb25seSBmb3JtYXR0ZXI6IE56UHJvZ3Jlc3NGb3JtYXR0ZXI7XG4gICAgcmVhZG9ubHkgc3RhdHVzOiBOelByb2dyZXNzU3RhdHVzVHlwZTtcbiAgICByZWFkb25seSBzdHJva2VXaWR0aDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGlzQ2lyY2xlU3R5bGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjYWNoZWRTdGF0dXM7XG4gICAgcHJpdmF0ZSBpbmZlcnJlZFN0YXR1cztcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIGNvbnN0cnVjdG9yKG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVJY29uO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBwYXRocyB3aGVuIHRoZSB0eXBlIGlzIGNpcmNsZSBvciBkYXNoYm9hcmQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDaXJjbGVQYXRocztcbiAgICBwcml2YXRlIHNldFN0cm9rZUNvbG9yO1xufVxuIl19