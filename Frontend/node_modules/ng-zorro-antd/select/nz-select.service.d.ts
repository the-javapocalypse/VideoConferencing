/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ReplaySubject, Subject } from 'rxjs';
import { NzOptionGroupComponent } from './nz-option-group.component';
import { NzOptionComponent } from './nz-option.component';
import { TFilterOption } from './nz-option.pipe';
import * as ɵngcc0 from '@angular/core';
export declare class NzSelectService {
    /** Input params **/
    autoClearSearchValue: boolean;
    serverSearch: boolean;
    filterOption: TFilterOption;
    mode: 'default' | 'multiple' | 'tags';
    maxMultipleCount: number;
    disabled: boolean;
    compareWith: (o1: any, o2: any) => boolean;
    /** selectedValueChanged should emit ngModelChange or not **/
    private listOfSelectedValueWithEmit$;
    /** ContentChildren Change **/
    private mapOfTemplateOption$;
    /** searchValue Change **/
    private searchValueRaw$;
    private listOfFilteredOption;
    private openRaw$;
    private checkRaw$;
    private open;
    clearInput$: Subject<boolean>;
    searchValue: string;
    isShowNotFound: boolean;
    /** animation event **/
    animationEvent$: Subject<unknown>;
    /** open event **/
    open$: import("rxjs").Observable<boolean>;
    activatedOption: NzOptionComponent | null;
    activatedOption$: ReplaySubject<NzOptionComponent | null>;
    listOfSelectedValue$: import("rxjs").Observable<any[]>;
    modelChange$: import("rxjs").Observable<any[] | null>;
    searchValue$: import("rxjs").Observable<string>;
    listOfSelectedValue: any[];
    /** flat ViewChildren **/
    listOfTemplateOption: NzOptionComponent[];
    /** tag option **/
    listOfTagOption: NzOptionComponent[];
    /** tag option concat template option **/
    listOfTagAndTemplateOption: NzOptionComponent[];
    /** ViewChildren **/
    listOfNzOptionComponent: NzOptionComponent[];
    listOfNzOptionGroupComponent: NzOptionGroupComponent[];
    /** click or enter add tag option **/
    addedTagOption: NzOptionComponent | null;
    /** display in top control **/
    listOfCachedSelectedOption: NzOptionComponent[];
    /** selected value or ViewChildren change **/
    valueOrOption$: import("rxjs").Observable<[any[], {
        listOfNzOptionComponent: NzOptionComponent[];
        listOfNzOptionGroupComponent: NzOptionGroupComponent[];
    }]>;
    check$: import("rxjs").Observable<unknown>;
    clickOption(option: NzOptionComponent): void;
    updateListOfCachedOption(): void;
    updateListOfTagOption(): void;
    updateAddTagOption(): void;
    updateListOfFilteredOption(): void;
    clearInput(): void;
    updateListOfSelectedValue(value: any[], emit: boolean): void;
    updateActivatedOption(option: NzOptionComponent | null): void;
    tokenSeparate(inputValue: string, tokenSeparators: string[]): void;
    includesSeparators(str: string | string[], separators: string[]): boolean;
    splitBySeparators(str: string | string[], separators: string[]): string[];
    resetActivatedOptionIfNeeded(): void;
    updateTemplateOption(listOfNzOptionComponent: NzOptionComponent[], listOfNzOptionGroupComponent: NzOptionGroupComponent[]): void;
    updateSearchValue(value: string): void;
    updateSelectedValueByLabelList(listOfLabel: string[]): void;
    onKeyDown(e: KeyboardEvent): void;
    removeValueFormSelected(option: NzOptionComponent): void;
    setOpenState(value: boolean): void;
    check(): void;
    readonly isSingleMode: boolean;
    readonly isTagsMode: boolean;
    readonly isMultipleMode: boolean;
    readonly isMultipleOrTags: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzSelectService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzSelectService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotc2VsZWN0LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibnotc2VsZWN0LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IFJlcGxheVN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56T3B0aW9uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi1ncm91cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL256LW9wdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgVEZpbHRlck9wdGlvbiB9IGZyb20gJy4vbnotb3B0aW9uLnBpcGUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpTZWxlY3RTZXJ2aWNlIHtcbiAgICAvKiogSW5wdXQgcGFyYW1zICoqL1xuICAgIGF1dG9DbGVhclNlYXJjaFZhbHVlOiBib29sZWFuO1xuICAgIHNlcnZlclNlYXJjaDogYm9vbGVhbjtcbiAgICBmaWx0ZXJPcHRpb246IFRGaWx0ZXJPcHRpb247XG4gICAgbW9kZTogJ2RlZmF1bHQnIHwgJ211bHRpcGxlJyB8ICd0YWdzJztcbiAgICBtYXhNdWx0aXBsZUNvdW50OiBudW1iZXI7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY29tcGFyZVdpdGg6IChvMTogYW55LCBvMjogYW55KSA9PiBib29sZWFuO1xuICAgIC8qKiBzZWxlY3RlZFZhbHVlQ2hhbmdlZCBzaG91bGQgZW1pdCBuZ01vZGVsQ2hhbmdlIG9yIG5vdCAqKi9cbiAgICBwcml2YXRlIGxpc3RPZlNlbGVjdGVkVmFsdWVXaXRoRW1pdCQ7XG4gICAgLyoqIENvbnRlbnRDaGlsZHJlbiBDaGFuZ2UgKiovXG4gICAgcHJpdmF0ZSBtYXBPZlRlbXBsYXRlT3B0aW9uJDtcbiAgICAvKiogc2VhcmNoVmFsdWUgQ2hhbmdlICoqL1xuICAgIHByaXZhdGUgc2VhcmNoVmFsdWVSYXckO1xuICAgIHByaXZhdGUgbGlzdE9mRmlsdGVyZWRPcHRpb247XG4gICAgcHJpdmF0ZSBvcGVuUmF3JDtcbiAgICBwcml2YXRlIGNoZWNrUmF3JDtcbiAgICBwcml2YXRlIG9wZW47XG4gICAgY2xlYXJJbnB1dCQ6IFN1YmplY3Q8Ym9vbGVhbj47XG4gICAgc2VhcmNoVmFsdWU6IHN0cmluZztcbiAgICBpc1Nob3dOb3RGb3VuZDogYm9vbGVhbjtcbiAgICAvKiogYW5pbWF0aW9uIGV2ZW50ICoqL1xuICAgIGFuaW1hdGlvbkV2ZW50JDogU3ViamVjdDx1bmtub3duPjtcbiAgICAvKiogb3BlbiBldmVudCAqKi9cbiAgICBvcGVuJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGFjdGl2YXRlZE9wdGlvbjogTnpPcHRpb25Db21wb25lbnQgfCBudWxsO1xuICAgIGFjdGl2YXRlZE9wdGlvbiQ6IFJlcGxheVN1YmplY3Q8TnpPcHRpb25Db21wb25lbnQgfCBudWxsPjtcbiAgICBsaXN0T2ZTZWxlY3RlZFZhbHVlJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGFueVtdPjtcbiAgICBtb2RlbENoYW5nZSQ6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTxhbnlbXSB8IG51bGw+O1xuICAgIHNlYXJjaFZhbHVlJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPHN0cmluZz47XG4gICAgbGlzdE9mU2VsZWN0ZWRWYWx1ZTogYW55W107XG4gICAgLyoqIGZsYXQgVmlld0NoaWxkcmVuICoqL1xuICAgIGxpc3RPZlRlbXBsYXRlT3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudFtdO1xuICAgIC8qKiB0YWcgb3B0aW9uICoqL1xuICAgIGxpc3RPZlRhZ09wdGlvbjogTnpPcHRpb25Db21wb25lbnRbXTtcbiAgICAvKiogdGFnIG9wdGlvbiBjb25jYXQgdGVtcGxhdGUgb3B0aW9uICoqL1xuICAgIGxpc3RPZlRhZ0FuZFRlbXBsYXRlT3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudFtdO1xuICAgIC8qKiBWaWV3Q2hpbGRyZW4gKiovXG4gICAgbGlzdE9mTnpPcHRpb25Db21wb25lbnQ6IE56T3B0aW9uQ29tcG9uZW50W107XG4gICAgbGlzdE9mTnpPcHRpb25Hcm91cENvbXBvbmVudDogTnpPcHRpb25Hcm91cENvbXBvbmVudFtdO1xuICAgIC8qKiBjbGljayBvciBlbnRlciBhZGQgdGFnIG9wdGlvbiAqKi9cbiAgICBhZGRlZFRhZ09wdGlvbjogTnpPcHRpb25Db21wb25lbnQgfCBudWxsO1xuICAgIC8qKiBkaXNwbGF5IGluIHRvcCBjb250cm9sICoqL1xuICAgIGxpc3RPZkNhY2hlZFNlbGVjdGVkT3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudFtdO1xuICAgIC8qKiBzZWxlY3RlZCB2YWx1ZSBvciBWaWV3Q2hpbGRyZW4gY2hhbmdlICoqL1xuICAgIHZhbHVlT3JPcHRpb24kOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8W2FueVtdLCB7XG4gICAgICAgIGxpc3RPZk56T3B0aW9uQ29tcG9uZW50OiBOek9wdGlvbkNvbXBvbmVudFtdO1xuICAgICAgICBsaXN0T2ZOek9wdGlvbkdyb3VwQ29tcG9uZW50OiBOek9wdGlvbkdyb3VwQ29tcG9uZW50W107XG4gICAgfV0+O1xuICAgIGNoZWNrJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPHVua25vd24+O1xuICAgIGNsaWNrT3B0aW9uKG9wdGlvbjogTnpPcHRpb25Db21wb25lbnQpOiB2b2lkO1xuICAgIHVwZGF0ZUxpc3RPZkNhY2hlZE9wdGlvbigpOiB2b2lkO1xuICAgIHVwZGF0ZUxpc3RPZlRhZ09wdGlvbigpOiB2b2lkO1xuICAgIHVwZGF0ZUFkZFRhZ09wdGlvbigpOiB2b2lkO1xuICAgIHVwZGF0ZUxpc3RPZkZpbHRlcmVkT3B0aW9uKCk6IHZvaWQ7XG4gICAgY2xlYXJJbnB1dCgpOiB2b2lkO1xuICAgIHVwZGF0ZUxpc3RPZlNlbGVjdGVkVmFsdWUodmFsdWU6IGFueVtdLCBlbWl0OiBib29sZWFuKTogdm9pZDtcbiAgICB1cGRhdGVBY3RpdmF0ZWRPcHRpb24ob3B0aW9uOiBOek9wdGlvbkNvbXBvbmVudCB8IG51bGwpOiB2b2lkO1xuICAgIHRva2VuU2VwYXJhdGUoaW5wdXRWYWx1ZTogc3RyaW5nLCB0b2tlblNlcGFyYXRvcnM6IHN0cmluZ1tdKTogdm9pZDtcbiAgICBpbmNsdWRlc1NlcGFyYXRvcnMoc3RyOiBzdHJpbmcgfCBzdHJpbmdbXSwgc2VwYXJhdG9yczogc3RyaW5nW10pOiBib29sZWFuO1xuICAgIHNwbGl0QnlTZXBhcmF0b3JzKHN0cjogc3RyaW5nIHwgc3RyaW5nW10sIHNlcGFyYXRvcnM6IHN0cmluZ1tdKTogc3RyaW5nW107XG4gICAgcmVzZXRBY3RpdmF0ZWRPcHRpb25JZk5lZWRlZCgpOiB2b2lkO1xuICAgIHVwZGF0ZVRlbXBsYXRlT3B0aW9uKGxpc3RPZk56T3B0aW9uQ29tcG9uZW50OiBOek9wdGlvbkNvbXBvbmVudFtdLCBsaXN0T2ZOek9wdGlvbkdyb3VwQ29tcG9uZW50OiBOek9wdGlvbkdyb3VwQ29tcG9uZW50W10pOiB2b2lkO1xuICAgIHVwZGF0ZVNlYXJjaFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHVwZGF0ZVNlbGVjdGVkVmFsdWVCeUxhYmVsTGlzdChsaXN0T2ZMYWJlbDogc3RyaW5nW10pOiB2b2lkO1xuICAgIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICByZW1vdmVWYWx1ZUZvcm1TZWxlY3RlZChvcHRpb246IE56T3B0aW9uQ29tcG9uZW50KTogdm9pZDtcbiAgICBzZXRPcGVuU3RhdGUodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNoZWNrKCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgaXNTaW5nbGVNb2RlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzVGFnc01vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNNdWx0aXBsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNNdWx0aXBsZU9yVGFnczogYm9vbGVhbjtcbn1cbiJdfQ==