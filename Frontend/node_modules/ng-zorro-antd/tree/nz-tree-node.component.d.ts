/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NzFormatBeforeDropEvent, NzNoAnimationDirective, NzTreeBaseService, NzTreeNode } from 'ng-zorro-antd/core';
import * as ɵngcc0 from '@angular/core';
export declare class NzTreeNodeComponent implements OnInit, OnChanges, OnDestroy {
    nzTreeService: NzTreeBaseService;
    private ngZone;
    private renderer;
    private elRef;
    private cdr;
    noAnimation?: NzNoAnimationDirective | undefined;
    dragElement: ElementRef;
    /**
     * for global property
     */
    nzTreeNode: NzTreeNode;
    nzShowLine: boolean;
    nzShowExpand: boolean;
    nzCheckable: boolean;
    nzAsyncData: boolean;
    nzHideUnMatched: boolean;
    nzNoAnimation: boolean;
    nzSelectMode: boolean;
    nzShowIcon: boolean;
    nzExpandedIcon: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzTreeTemplate: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzBeforeDrop: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;
    nzSearchValue: string;
    nzDraggable: boolean;
    /**
     * @deprecated use `nzExpandAll` instead.
     */
    nzDefaultExpandAll: boolean;
    nzExpandAll: boolean;
    prefixCls: string;
    nzNodeClass: {};
    nzNodeSwitcherClass: {};
    nzNodeContentClass: {};
    nzNodeCheckboxClass: {};
    nzNodeContentIconClass: {};
    nzNodeContentLoadingClass: {};
    /**
     * drag var
     */
    destroy$: Subject<unknown>;
    dragPos: number;
    dragPosClass: {
        [key: string]: string;
    };
    /**
     * default set
     */
    _nzDraggable: boolean;
    _nzExpandAll: boolean;
    readonly nzIcon: string;
    readonly canDraggable: boolean | null;
    readonly isShowLineIcon: boolean;
    readonly isShowSwitchIcon: boolean;
    readonly isSwitcherOpen: boolean;
    readonly isSwitcherClose: boolean;
    readonly displayStyle: string;
    /**
     * reset node class
     */
    setClassMap(): void;
    onMousedown(event: MouseEvent): void;
    /**
     * click node to select, 200ms to dbl click
     */
    nzClick(event: MouseEvent): void;
    nzDblClick(event: MouseEvent): void;
    /**
     * @param event
     */
    nzContextMenu(event: MouseEvent): void;
    /**
     * collapse node
     * @param event
     */
    _clickExpand(event: MouseEvent): void;
    private setDisplayForChildNodes;
    private setDisplayForParentNodes;
    /**
     * check node
     * @param event
     */
    _clickCheckBox(event: MouseEvent): void;
    /**
     * drag event
     * @param e
     */
    clearDragClass(): void;
    handleDragStart(e: DragEvent): void;
    handleDragEnter(e: DragEvent): void;
    handleDragOver(e: DragEvent): void;
    handleDragLeave(e: DragEvent): void;
    handleDragDrop(e: DragEvent): void;
    handleDragEnd(e: DragEvent): void;
    /**
     * Listening to dragging events.
     */
    handDragEvent(): void;
    isTemplateRef(value: {}): boolean;
    markForCheck(): void;
    constructor(nzTreeService: NzTreeBaseService, ngZone: NgZone, renderer: Renderer2, elRef: ElementRef, cdr: ChangeDetectorRef, noAnimation?: NzNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeNodeComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTreeNodeComponent, "nz-tree-node", ["nzTreeNode"], {
    "nzHideUnMatched": "nzHideUnMatched";
    "nzNoAnimation": "nzNoAnimation";
    "nzSelectMode": "nzSelectMode";
    "nzShowIcon": "nzShowIcon";
    "nzSearchValue": "nzSearchValue";
    "nzDraggable": "nzDraggable";
    "nzDefaultExpandAll": "nzDefaultExpandAll";
    "nzExpandAll": "nzExpandAll";
    "nzTreeNode": "nzTreeNode";
    "nzShowLine": "nzShowLine";
    "nzShowExpand": "nzShowExpand";
    "nzCheckable": "nzCheckable";
    "nzAsyncData": "nzAsyncData";
    "nzExpandedIcon": "nzExpandedIcon";
    "nzTreeTemplate": "nzTreeTemplate";
    "nzBeforeDrop": "nzBeforeDrop";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJlZS1ub2RlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuei10cmVlLW5vZGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0R0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56Rm9ybWF0QmVmb3JlRHJvcEV2ZW50LCBOek5vQW5pbWF0aW9uRGlyZWN0aXZlLCBOelRyZWVCYXNlU2VydmljZSwgTnpUcmVlTm9kZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelRyZWVOb2RlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgbnpUcmVlU2VydmljZTogTnpUcmVlQmFzZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsUmVmO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIG5vQW5pbWF0aW9uPzogTnpOb0FuaW1hdGlvbkRpcmVjdGl2ZSB8IHVuZGVmaW5lZDtcbiAgICBkcmFnRWxlbWVudDogRWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAgKiBmb3IgZ2xvYmFsIHByb3BlcnR5XG4gICAgICovXG4gICAgbnpUcmVlTm9kZTogTnpUcmVlTm9kZTtcbiAgICBuelNob3dMaW5lOiBib29sZWFuO1xuICAgIG56U2hvd0V4cGFuZDogYm9vbGVhbjtcbiAgICBuekNoZWNrYWJsZTogYm9vbGVhbjtcbiAgICBuekFzeW5jRGF0YTogYm9vbGVhbjtcbiAgICBuekhpZGVVbk1hdGNoZWQ6IGJvb2xlYW47XG4gICAgbnpOb0FuaW1hdGlvbjogYm9vbGVhbjtcbiAgICBuelNlbGVjdE1vZGU6IGJvb2xlYW47XG4gICAgbnpTaG93SWNvbjogYm9vbGVhbjtcbiAgICBuekV4cGFuZGVkSWNvbjogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgfT47XG4gICAgbnpUcmVlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgJGltcGxpY2l0OiBOelRyZWVOb2RlO1xuICAgIH0+O1xuICAgIG56QmVmb3JlRHJvcDogKGNvbmZpcm06IE56Rm9ybWF0QmVmb3JlRHJvcEV2ZW50KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIG56U2VhcmNoVmFsdWU6IHN0cmluZztcbiAgICBuekRyYWdnYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgYG56RXhwYW5kQWxsYCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIG56RGVmYXVsdEV4cGFuZEFsbDogYm9vbGVhbjtcbiAgICBuekV4cGFuZEFsbDogYm9vbGVhbjtcbiAgICBwcmVmaXhDbHM6IHN0cmluZztcbiAgICBuek5vZGVDbGFzczoge307XG4gICAgbnpOb2RlU3dpdGNoZXJDbGFzczoge307XG4gICAgbnpOb2RlQ29udGVudENsYXNzOiB7fTtcbiAgICBuek5vZGVDaGVja2JveENsYXNzOiB7fTtcbiAgICBuek5vZGVDb250ZW50SWNvbkNsYXNzOiB7fTtcbiAgICBuek5vZGVDb250ZW50TG9hZGluZ0NsYXNzOiB7fTtcbiAgICAvKipcbiAgICAgKiBkcmFnIHZhclxuICAgICAqL1xuICAgIGRlc3Ryb3kkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIGRyYWdQb3M6IG51bWJlcjtcbiAgICBkcmFnUG9zQ2xhc3M6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogZGVmYXVsdCBzZXRcbiAgICAgKi9cbiAgICBfbnpEcmFnZ2FibGU6IGJvb2xlYW47XG4gICAgX256RXhwYW5kQWxsOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IG56SWNvbjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNhbkRyYWdnYWJsZTogYm9vbGVhbiB8IG51bGw7XG4gICAgcmVhZG9ubHkgaXNTaG93TGluZUljb246IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNTaG93U3dpdGNoSWNvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1N3aXRjaGVyT3BlbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1N3aXRjaGVyQ2xvc2U6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlzcGxheVN0eWxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogcmVzZXQgbm9kZSBjbGFzc1xuICAgICAqL1xuICAgIHNldENsYXNzTWFwKCk6IHZvaWQ7XG4gICAgb25Nb3VzZWRvd24oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIGNsaWNrIG5vZGUgdG8gc2VsZWN0LCAyMDBtcyB0byBkYmwgY2xpY2tcbiAgICAgKi9cbiAgICBuekNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBuekRibENsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBuekNvbnRleHRNZW51KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBjb2xsYXBzZSBub2RlXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgX2NsaWNrRXhwYW5kKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIHNldERpc3BsYXlGb3JDaGlsZE5vZGVzO1xuICAgIHByaXZhdGUgc2V0RGlzcGxheUZvclBhcmVudE5vZGVzO1xuICAgIC8qKlxuICAgICAqIGNoZWNrIG5vZGVcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBfY2xpY2tDaGVja0JveChldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogZHJhZyBldmVudFxuICAgICAqIEBwYXJhbSBlXG4gICAgICovXG4gICAgY2xlYXJEcmFnQ2xhc3MoKTogdm9pZDtcbiAgICBoYW5kbGVEcmFnU3RhcnQoZTogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVEcmFnRW50ZXIoZTogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVEcmFnT3ZlcihlOiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZURyYWdMZWF2ZShlOiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZURyYWdEcm9wKGU6IERyYWdFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlRHJhZ0VuZChlOiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIExpc3RlbmluZyB0byBkcmFnZ2luZyBldmVudHMuXG4gICAgICovXG4gICAgaGFuZERyYWdFdmVudCgpOiB2b2lkO1xuICAgIGlzVGVtcGxhdGVSZWYodmFsdWU6IHt9KTogYm9vbGVhbjtcbiAgICBtYXJrRm9yQ2hlY2soKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihuelRyZWVTZXJ2aWNlOiBOelRyZWVCYXNlU2VydmljZSwgbmdab25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsUmVmOiBFbGVtZW50UmVmLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBub0FuaW1hdGlvbj86IE56Tm9BbmltYXRpb25EaXJlY3RpdmUgfCB1bmRlZmluZWQpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19