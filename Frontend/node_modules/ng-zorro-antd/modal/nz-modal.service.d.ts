/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { Observable } from 'rxjs';
import { NzModalControlService } from './nz-modal-control.service';
import { NzModalRef } from './nz-modal-ref.class';
import { NzModalComponent } from './nz-modal.component';
import { ConfirmType, ModalOptionsForService } from './nz-modal.type';
import * as ɵngcc0 from '@angular/core';
export declare class ModalBuilderForService {
    private overlay;
    private modalRef;
    private overlayRef;
    constructor(overlay: Overlay, options?: ModalOptionsForService);
    getInstance(): NzModalComponent | null;
    destroyModal(): void;
    private changeProps;
    private createModal;
}
export declare class NzModalService {
    private overlay;
    private modalControl;
    readonly openModals: NzModalRef[];
    readonly afterAllClose: Observable<void>;
    constructor(overlay: Overlay, modalControl: NzModalControlService);
    closeAll(): void;
    create<T>(options?: ModalOptionsForService<T>): NzModalRef<T>;
    confirm<T>(options?: ModalOptionsForService<T>, confirmType?: ConfirmType): NzModalRef<T>;
    info<T>(options?: ModalOptionsForService<T>): NzModalRef<T>;
    success<T>(options?: ModalOptionsForService<T>): NzModalRef<T>;
    error<T>(options?: ModalOptionsForService<T>): NzModalRef<T>;
    warning<T>(options?: ModalOptionsForService<T>): NzModalRef<T>;
    private simpleConfirm;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotbW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJuei1tb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpNb2RhbENvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi9uei1tb2RhbC1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbnotbW9kYWwtcmVmLmNsYXNzJztcbmltcG9ydCB7IE56TW9kYWxDb21wb25lbnQgfSBmcm9tICcuL256LW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb25maXJtVHlwZSwgTW9kYWxPcHRpb25zRm9yU2VydmljZSB9IGZyb20gJy4vbnotbW9kYWwudHlwZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNb2RhbEJ1aWxkZXJGb3JTZXJ2aWNlIHtcbiAgICBwcml2YXRlIG92ZXJsYXk7XG4gICAgcHJpdmF0ZSBtb2RhbFJlZjtcbiAgICBwcml2YXRlIG92ZXJsYXlSZWY7XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogT3ZlcmxheSwgb3B0aW9ucz86IE1vZGFsT3B0aW9uc0ZvclNlcnZpY2UpO1xuICAgIGdldEluc3RhbmNlKCk6IE56TW9kYWxDb21wb25lbnQgfCBudWxsO1xuICAgIGRlc3Ryb3lNb2RhbCgpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hhbmdlUHJvcHM7XG4gICAgcHJpdmF0ZSBjcmVhdGVNb2RhbDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56TW9kYWxTZXJ2aWNlIHtcbiAgICBwcml2YXRlIG92ZXJsYXk7XG4gICAgcHJpdmF0ZSBtb2RhbENvbnRyb2w7XG4gICAgcmVhZG9ubHkgb3Blbk1vZGFsczogTnpNb2RhbFJlZltdO1xuICAgIHJlYWRvbmx5IGFmdGVyQWxsQ2xvc2U6IE9ic2VydmFibGU8dm9pZD47XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogT3ZlcmxheSwgbW9kYWxDb250cm9sOiBOek1vZGFsQ29udHJvbFNlcnZpY2UpO1xuICAgIGNsb3NlQWxsKCk6IHZvaWQ7XG4gICAgY3JlYXRlPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnNGb3JTZXJ2aWNlPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBjb25maXJtPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnNGb3JTZXJ2aWNlPFQ+LCBjb25maXJtVHlwZT86IENvbmZpcm1UeXBlKTogTnpNb2RhbFJlZjxUPjtcbiAgICBpbmZvPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnNGb3JTZXJ2aWNlPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBzdWNjZXNzPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnNGb3JTZXJ2aWNlPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBlcnJvcjxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zRm9yU2VydmljZTxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgd2FybmluZzxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zRm9yU2VydmljZTxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgcHJpdmF0ZSBzaW1wbGVDb25maXJtO1xufVxuIl19